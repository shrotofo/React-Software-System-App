{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shrut\\\\Downloads\\\\updated-movie-box\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { searchForShows, searchForPeople } from './../api/tvmaze';\nimport SearchForm from '../components/SearchForm';\nimport { useQuery } from '@tanstack/react-query';\nimport ShowGrid from '../components/shows/ShowGrid';\nimport ActorsGrid from '../components/actors/ActorsGrid';\nimport styled, { css } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  text-align: center;\n`;\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid palevioletred;\n  color: ${props => props.theme.colors.main};\n  margin: 0.1em;\n  padding: 0.25em 1em;\n  ${props => props.primary && css`\n      background: palevioletred;\n      color: white;\n    `}\n`;\nconst Home = () => {\n  _s();\n  const [filter, setFilter] = useState(null);\n  const {\n    data: apiData,\n    error: apiDataError\n  } = useQuery({\n    queryKey: ['search', filter],\n    queryFn: () => filter.searchOption === 'shows' ? searchForShows(filter.q) : searchForPeople(filter.q),\n    enabled: !!filter,\n    refetchOnWindowFocus: false\n  });\n  const onSearch = async _ref => {\n    let {\n      q,\n      searchOption\n    } = _ref;\n    setFilter({\n      q,\n      searchOption\n    });\n  };\n  const renderApiData = () => {\n    if (apiDataError) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error occurred: \", apiDataError.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }, this);\n    }\n    if ((apiData === null || apiData === void 0 ? void 0 : apiData.length) === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 14\n      }, this);\n    }\n    if (apiData) {\n      return apiData[0].show ? /*#__PURE__*/_jsxDEV(ShowGrid, {\n        shows: apiData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(ActorsGrid, {\n        actors: apiData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderApiData()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"C8S4IevXoTDYX0u+qXH/zorjD3w=\", false, function () {\n  return [useQuery];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","searchForShows","searchForPeople","SearchForm","useQuery","ShowGrid","ActorsGrid","styled","css","jsxDEV","_jsxDEV","Container","div","Button","button","props","theme","colors","main","primary","Home","_s","filter","setFilter","data","apiData","error","apiDataError","queryKey","queryFn","searchOption","q","enabled","refetchOnWindowFocus","onSearch","_ref","renderApiData","children","message","fileName","_jsxFileName","lineNumber","columnNumber","length","show","shows","actors","_c","$RefreshReg$"],"sources":["C:/Users/shrut/Downloads/updated-movie-box/src/pages/Home.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { searchForShows, searchForPeople } from './../api/tvmaze';\nimport SearchForm from '../components/SearchForm';\nimport { useQuery } from '@tanstack/react-query';\nimport ShowGrid from '../components/shows/ShowGrid';\nimport ActorsGrid from '../components/actors/ActorsGrid';\nimport styled, { css } from 'styled-components';\n\nconst Container = styled.div`\n  text-align: center;\n`;\n\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid palevioletred;\n  color: ${props => props.theme.colors.main};\n  margin: 0.1em;\n  padding: 0.25em 1em;\n  ${props =>\n    props.primary &&\n    css`\n      background: palevioletred;\n      color: white;\n    `}\n`;\n\nconst Home = () => {\n  const [filter, setFilter] = useState(null);\n\n  const { data: apiData, error: apiDataError } = useQuery({\n    queryKey: ['search', filter],\n    queryFn: () =>\n      filter.searchOption === 'shows'\n        ? searchForShows(filter.q)\n        : searchForPeople(filter.q),\n    enabled: !!filter,\n    refetchOnWindowFocus: false,\n  });\n\n  const onSearch = async ({ q, searchOption }) => {\n    setFilter({ q, searchOption });\n  };\n\n  const renderApiData = () => {\n    if (apiDataError) {\n      return <div>Error occurred: {apiDataError.message}</div>;\n    }\n    if (apiData?.length === 0) {\n      return <div>No results</div>;\n    }\n    if (apiData) {\n      return apiData[0].show ? (\n        <ShowGrid shows={apiData} />\n      ) : (\n        <ActorsGrid actors={apiData} />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div>\n      <SearchForm onSearch={onSearch} />\n      <div>{renderApiData()}</div>\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}